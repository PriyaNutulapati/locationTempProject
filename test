
import Foundation
import CoreLocation
import Combine

class LocationManager: NSObject, ObservableObject, CLLocationManagerDelegate {
    private var locationManager = CLLocationManager()
    @Published var location: CLLocation?
    private var timer: Timer?
    private var isUpdatingLocation = false // Flag to prevent multiple updates

    override init() {
            super.init()
            self.locationManager.delegate = self
            self.locationManager.desiredAccuracy = kCLLocationAccuracyBest
            self.locationManager.requestWhenInUseAuthorization()
            startLocationUpdates()
        }

        // Start location updates at intervals
        func startLocationUpdates() {
            // Schedule a timer to trigger every 5 minutes (300 seconds)
            timer = Timer.scheduledTimer(withTimeInterval: 300, repeats: true) { _ in
                if !self.isUpdatingLocation {
                    self.isUpdatingLocation = true
                    self.locationManager.startUpdatingLocation()

                    // Stop location updates after a small delay (e.g., 10 seconds)
                    DispatchQueue.main.asyncAfter(deadline: .now() + 5) {
                        self.locationManager.stopUpdatingLocation()
                        self.isUpdatingLocation = false
                    }
                }
            }

            // Start immediate location updates for the first time
            self.locationManager.startUpdatingLocation()

            // Stop after a small delay
            DispatchQueue.main.asyncAfter(deadline: .now() + 5) {
                self.locationManager.stopUpdatingLocation()
            }
        }

        // Delegate method to update location and write to file
        func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {
            guard let location = locations.last else { return }
            self.location = location
            print("Inside locationManager. Latitude: \(location.coordinate.latitude), Longitude: \(location.coordinate.longitude)")
            writeCoordinatesToFile(location: location)
        }

    // Write coordinates to a text file
    func writeCoordinatesToFile(location: CLLocation) {
        let lat = location.coordinate.latitude
        let lon = location.coordinate.longitude
        let coordinateString = "Latitude: \(lat), Longitude: \(lon)\n"

        // Get the path to the documents directory
        if let documentDirectory = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first {
            let filePath = documentDirectory.appendingPathComponent("coordinates.txt")

            // Write the coordinates string to the file, appending each time
            do {
                if FileManager.default.fileExists(atPath: filePath.path) {
                    let fileHandle = try FileHandle(forWritingTo: filePath)
                    fileHandle.seekToEndOfFile()
                    if let data = coordinateString.data(using: .utf8) {
                        fileHandle.write(data)
                    }
                    fileHandle.closeFile()
                } else {
                    try coordinateString.write(to: filePath, atomically: true, encoding: .utf8)
                }
                print("Coordinates appended to file.")
                updateGitHubFile(with: filePath)  // Attempt to upload to GitHub
            } catch {
                print("Error writing to file: \(error.localizedDescription)")
            }
        }
    }
    // Stop timer if needed
    func stopLocationUpdates() {
        timer?.invalidate()
        timer = nil
        locationManager.stopUpdatingLocation()
    }


    func updateGitHubFile(with filePath: URL) {
        let token = ""  // Replace with your GitHub Personal Access Token
        let username = ""  // Replace with your GitHub username
        let repo = ""  // Replace with your GitHub repository name
        let filePathInRepo = "coordinates.txt"  // Path to the file in your GitHub repository

        // Read the file content
        guard let fileContent = try? Data(contentsOf: filePath) else {
            print("Failed to read file content.")
            return
        }

        let base64Content = fileContent.base64EncodedString()

        // Step 1: Get SHA of the existing file (Check if it exists)
        let shaURL = URL(string: "https://api.github.com/repos/\(username)/\(repo)/contents/\(filePathInRepo)")!
        var shaRequest = URLRequest(url: shaURL)
        shaRequest.setValue("token \(token)", forHTTPHeaderField: "Authorization")
        shaRequest.httpMethod = "GET"

        let session = URLSession.shared
        session.dataTask(with: shaRequest) { data, response, error in
            if let httpResponse = response as? HTTPURLResponse, httpResponse.statusCode == 404 {
                // File does not exist, create a new file
                self.createNewGitHubFile(base64Content: base64Content, token: token, username: username, repo: repo, filePathInRepo: filePathInRepo)
                return
            }

            guard let data = data else {
                print("Error retrieving SHA: \(error?.localizedDescription ?? "Unknown error")")
                return
            }

            do {
                if let json = try JSONSerialization.jsonObject(with: data) as? [String: Any],
                   let sha = json["sha"] as? String {
                    // Step 2: Update the file using the latest SHA
                    self.updateGitHubFileWithSHA(sha: sha, base64Content: base64Content, token: token, username: username, repo: repo, filePathInRepo: filePathInRepo)
                } else {
                    print("Failed to parse SHA from response.")
                }
            } catch {
                print("Error parsing JSON: \(error.localizedDescription)")
            }
        }.resume()
    }

        func updateGitHubFileWithSHA(sha: String, base64Content: String, token: String, username: String, repo: String, filePathInRepo: String) {
            let updateURL = URL(string: "https://api.github.com/repos/\(username)/\(repo)/contents/\(filePathInRepo)")!
            var updateRequest = URLRequest(url: updateURL)
            updateRequest.setValue("token \(token)", forHTTPHeaderField: "Authorization")
            updateRequest.setValue("application/json", forHTTPHeaderField: "Content-Type")
            updateRequest.httpMethod = "PUT"

            let updateBody: [String: Any] = [
                "message": "Updated coordinates",
                "content": base64Content,
                "sha": sha
            ]

            let session = URLSession.shared
            do {
                let jsonData = try JSONSerialization.data(withJSONObject: updateBody)
                updateRequest.httpBody = jsonData

                session.dataTask(with: updateRequest) { data, response, error in
                    guard let httpResponse = response as? HTTPURLResponse else { return }
                    if httpResponse.statusCode == 200 {
                        print("File updated successfully.")
                    } else {
                        print("Failed to update file. Status code: \(httpResponse.statusCode)")
                    }
                }.resume()
            } catch {
                print("Failed to create JSON body for update: \(error.localizedDescription)")
            }
        }

    // Function to create a new file in GitHub
    func createNewGitHubFile(base64Content: String, token: String, username: String, repo: String, filePathInRepo: String) {
        let url = URL(string: "https://api.github.com/repos/\(username)/\(repo)/contents/\(filePathInRepo)")!
        var request = URLRequest(url: url)
        request.setValue("token \(token)", forHTTPHeaderField: "Authorization")
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.httpMethod = "PUT"

        let body: [String: Any] = [
            "message": "Created coordinates file",
            "content": base64Content
        ]

        let jsonData = try? JSONSerialization.data(withJSONObject: body)
        request.httpBody = jsonData

        URLSession.shared.dataTask(with: request) { data, response, error in
            guard let httpResponse = response as? HTTPURLResponse else {
                print("Invalid response.")
                return
            }
            if httpResponse.statusCode == 201 {
                print("File created successfully.")
            } else if httpResponse.statusCode == 404 {
                print("Failed to create file. Make sure the repository path is correct.")
                print("Response: \(String(data: data!, encoding: .utf8) ?? "No Response Body")")
            } else if httpResponse.statusCode == 401 {
                print("Failed to authenticate. Make sure the token is correct.")
                print("Response: \(String(data: data!, encoding: .utf8) ?? "No Response Body")")
            } else {
                print("Failed to create file. Status code: \(httpResponse.statusCode)")
                print("Response: \(String(data: data!, encoding: .utf8) ?? "No Response Body")")
            }
        }.resume()
    }

}

//
//  ContentView.swift
//  TempLocationManager
//
//  Created by Akal One on 9/24/24.
//
//
//
//import SwiftUI
//
//struct ContentView: View {
//    @StateObject var locationManager = LocationManager()
//
//    var body: some View {
//        VStack {
//            if let location = locationManager.location {
//                Text("Latitude: \(location.coordinate.latitude)")
//                Text("Longitude: \(location.coordinate.longitude)")
//            } else {
//                Text("Locating...")
//            }
//        }
//        .onAppear {
//            locationManager.startLocationUpdates()
//        }
//        .onDisappear {
//            locationManager.stopLocationUpdates() // Properly stopping location updates
//        }
//    }
//}
//
//
//
//#Preview {
//    ContentView()
//}




